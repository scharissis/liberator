#!/usr/bin/env node

var roadrunner = require("roadrunner");
var commander  = require("commander");
var Module     = require("module");
var path       = require("path");
var repl       = require("repl");
var to5        = require("../lib/6to5");
var util       = require("../lib/6to5/util");
var vm         = require("vm");
var _          = require("lodash");

var program = new commander.Command("6to5-node");

program.option("-e, --eval [script]", "Evaluate script");
program.option("-p, --print", "Evaluate script and print result");
program.option("-i, --ignore [regex]", "Ignore all files that match this regex when using the require hook");
program.option("-x, --extensions [extensions]", "List of extensions to hook into [.es6,.js]");
program.option("-r, --experimental", "Enable experimental support for proposed ES7 features");
program.option("-g, --playground", "Enable playground support");
program.option("-c, --cache", "Cache compiled files and require paths");

var pkg = require("../package.json");
program.version(pkg.version);
program.usage("[options] [ -e script | script.js ] [arguments]");
program.parse(process.argv);

if (program.cache) roadrunner.load();

//

to5.register({
  experimental: program.experimental,
  extensions:   program.extensions,
  playground:   program.playground,
  ignore:       program.ignore,
  cache:        program.cache && roadrunner.get("6to5")
});

//

var _eval = function (code, filename) {
  code = to5.transform(code, {
    filename: filename,
    blacklist: ["useStrict"],
    experimental: program.experimental,
    playground: program.playground
  }).code;
  return vm.runInThisContext(code, filename);
};

if (program.eval) {
  var result = _eval(program.eval, "eval");
  if (program.print) console.log(result);
} else {
  if (program.args.length) {
    // slice all arguments up to the first filename since they're 6to5 args that we handle
    var args = process.argv.slice(2);

    var i = 0;
    _.each(args, function (arg, i2) {
      if (arg[0] !== "-") {
        i = i2;
        return false;
      }
    });
    args = args.slice(i);

    // make the filename absolute
    var filename = args[0]
    if (!util.isAbsolute(filename)) args[0] = path.join(process.cwd(), filename);

    // add back on node and concat the sliced args
    process.argv = ["node"].concat(args);

    Module.runMain();
  } else {
    replStart();
  }
}

if (program.cache) roadrunner.save();

function replStart() {
  repl.start({
    prompt: "> ",
    input: process.stdin,
    output: process.stdout,
    eval: replEval,
    useGlobal: true
  });
}

function replEval(code, context, filename, callback) {
  var err;
  var result;

  try {
    if (/^\((.*?)\n\)$/.test(code)) {
      code = code.slice(1, -2); // remove "(" and "\n)"
    }

    result = _eval(code, filename);
  } catch (e) {
    err = e;
  }

  callback(err, result);
}
